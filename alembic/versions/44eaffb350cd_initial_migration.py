"""Initial migration

Revision ID: 44eaffb350cd
Revises: 
Create Date: 2025-02-07 00:32:22.887995

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '44eaffb350cd'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_subscription_agency_id', table_name='subscriptions')
    op.drop_index('idx_subscription_customer_id', table_name='subscriptions')
    op.drop_table('subscriptions')
    op.drop_index('idx_tag_to_ticket_B', table_name='tag_to_ticket')
    op.drop_table('tag_to_ticket')
    op.drop_index('idx_agency_sidebar_option_agency_id', table_name='agency_sidebar_options')
    op.drop_table('agency_sidebar_options')
    op.drop_index('idx_category', table_name='tags')
    op.drop_table('tags')
    op.drop_index('idx_media_sub_account_id', table_name='media')
    op.drop_table('media')
    op.drop_table('pipeline_tags')
    op.drop_index('idx_contact_is_active', table_name='contacts')
    op.drop_index('idx_contact_sub_account_id', table_name='contacts')
    op.drop_table('contacts')
    op.drop_index('idx_notification_agency_id', table_name='notifications')
    op.drop_index('idx_notification_user_id', table_name='notifications')
    op.drop_table('notifications')
    op.drop_table('sub_account_external_partner_association')
    op.drop_index('idx_assigned_by', table_name='permissions')
    op.drop_index('idx_email_sub_account', table_name='permissions')
    op.drop_index('idx_permissions_type', table_name='permissions')
    op.drop_index('ix_permissions_assigned_by', table_name='permissions')
    op.drop_index('ix_permissions_email', table_name='permissions')
    op.drop_index('ix_permissions_subAccountId', table_name='permissions')
    op.drop_table('permissions')
    op.drop_table('sub_account_user_association')
    op.drop_index('idx_agency_id', table_name='sub_account')
    op.drop_index('idx_sub_account_name', table_name='sub_account')
    op.drop_table('sub_account')
    op.drop_index('idx_invitation_agency_id', table_name='invitations')
    op.drop_table('invitations')
    op.drop_index('idx_account_status', table_name='users')
    op.drop_index('idx_email', table_name='users')
    op.drop_index('idx_subscription_plan', table_name='users')
    op.drop_index('idx_tenant_id', table_name='users')
    op.drop_table('users')
    op.drop_table('ticket_tags_association')
    op.drop_index('idx_funnel_live_products', table_name='funnels')
    op.drop_index('idx_funnel_sub_account_id', table_name='funnels')
    op.drop_table('funnels')
    op.drop_index('idx_class_name_funnel_id', table_name='class_names')
    op.drop_table('class_names')
    op.drop_index('idx_organization_id', table_name='projects')
    op.drop_index('idx_project_name', table_name='projects')
    op.drop_index('idx_status_alue', table_name='projects')
    op.drop_table('projects')
    op.drop_index('idx_created_at', table_name='password_histories')
    op.drop_index('idx_expires_at', table_name='password_histories')
    op.drop_index('idx_is_compliance_enforced', table_name='password_histories')
    op.drop_index('idx_user_id', table_name='password_histories')
    op.drop_table('password_histories')
    op.drop_index('idx_trigger_external_reference_id', table_name='triggers')
    op.drop_index('idx_trigger_is_active', table_name='triggers')
    op.drop_index('idx_trigger_sub_account_id', table_name='triggers')
    op.drop_index('idx_trigger_type', table_name='triggers')
    op.drop_table('triggers')
    op.drop_index('idx_add_on_agency_id', table_name='add_ons')
    op.drop_table('add_ons')
    op.drop_index('idx_domain', table_name='organizations')
    op.drop_index('idx_is_active', table_name='organizations')
    op.drop_index('idx_name', table_name='organizations')
    op.drop_table('organizations')
    op.drop_index('idx_external_partner_company', table_name='external_partner')
    op.drop_index('idx_external_partner_email', table_name='external_partner')
    op.drop_index('idx_external_partner_name', table_name='external_partner')
    op.drop_table('external_partner')
    op.drop_index('idx_is_public', table_name='pipelines')
    op.drop_index('idx_priority', table_name='pipelines')
    op.drop_index('idx_status', table_name='pipelines')
    op.drop_index('idx_sub_account_id', table_name='pipelines')
    op.drop_table('pipelines')
    op.drop_index('idx_agency_name', table_name='agencies')
    op.drop_index('idx_connectAccountId', table_name='agencies')
    op.drop_index('idx_customer_id', table_name='agencies')
    op.drop_index('idx_subscription_status', table_name='agencies')
    op.drop_table('agencies')
    op.drop_index('idx_ticket_assigned_user_id', table_name='tickets')
    op.drop_index('idx_ticket_customer_id', table_name='tickets')
    op.drop_index('idx_ticket_lane_id', table_name='tickets')
    op.drop_index('idx_ticket_priority', table_name='tickets')
    op.drop_index('idx_ticket_status', table_name='tickets')
    op.drop_table('tickets')
    op.drop_index('idx_sub_account_sidebar_option_sub_account_id', table_name='sub_account_sidebar_options')
    op.drop_table('sub_account_sidebar_options')
    op.drop_index('idx_automation_external_id', table_name='automations')
    op.drop_index('idx_automation_published', table_name='automations')
    op.drop_index('idx_automation_status', table_name='automations')
    op.drop_index('idx_automation_sub_account_id', table_name='automations')
    op.drop_index('idx_automation_trigger_id', table_name='automations')
    op.drop_table('automations')
    op.drop_index('idx_action_automation_id', table_name='actions')
    op.drop_index('idx_action_created_at', table_name='actions')
    op.drop_index('idx_action_estimated_duration', table_name='actions')
    op.drop_index('idx_action_lane_id', table_name='actions')
    op.drop_index('idx_action_order', table_name='actions')
    op.drop_index('idx_action_retries', table_name='actions')
    op.drop_index('idx_action_status', table_name='actions')
    op.drop_table('actions')
    op.drop_index('idx_funnel_page_funnel_id', table_name='funnel_pages')
    op.drop_table('funnel_pages')
    op.drop_index('idx_pipeline_id', table_name='lanes')
    op.drop_table('lanes')
    op.drop_index('idx_automation_instance_active', table_name='automation_instances')
    op.drop_index('idx_automation_instance_automation_id', table_name='automation_instances')
    op.drop_index('idx_automation_instance_created_at', table_name='automation_instances')
    op.drop_index('idx_automation_instance_external_reference', table_name='automation_instances')
    op.drop_index('idx_automation_instance_status', table_name='automation_instances')
    op.drop_table('automation_instances')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('automation_instances',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('automation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('miscdata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('external_reference', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('error_logs', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('Pending', 'InProgress', 'Completed', 'Failed', name='automation_instance_status_enum'), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['automation_id'], ['automations.id'], name='automation_instances_automation_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='automation_instances_pkey')
    )
    op.create_index('idx_automation_instance_status', 'automation_instances', ['status'], unique=False)
    op.create_index('idx_automation_instance_external_reference', 'automation_instances', ['external_reference'], unique=False)
    op.create_index('idx_automation_instance_created_at', 'automation_instances', ['created_at'], unique=False)
    op.create_index('idx_automation_instance_automation_id', 'automation_instances', ['automation_id'], unique=False)
    op.create_index('idx_automation_instance_active', 'automation_instances', ['active'], unique=False)
    op.create_table('lanes',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('pipelineId', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('Active', 'Inactive', 'Archived', name='lane_status'), autoincrement=False, nullable=False),
    sa.Column('goal', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('metrics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_automated', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('due_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('integrations', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['pipelineId'], ['pipelines.id'], name='lanes_pipelineId_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='lanes_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_pipeline_id', 'lanes', ['pipelineId'], unique=False)
    op.create_table('funnel_pages',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('path_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('visits', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('content', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('preview_image', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('funnel_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['funnel_id'], ['funnels.id'], name='funnel_pages_funnel_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='funnel_pages_pkey')
    )
    op.create_index('idx_funnel_page_funnel_id', 'funnel_pages', ['funnel_id'], unique=False)
    op.create_table('actions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('ActionType1', 'ActionType2', 'ActionType3', name='action_types_enum'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('automation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('lane_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('Pending', 'Completed', 'Failed', 'InProgress', name='action_status_enum'), autoincrement=False, nullable=False),
    sa.Column('parameters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('external_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('retries', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_retries', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('estimated_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('retry_delay', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['automation_id'], ['automations.id'], name='actions_automation_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='actions_pkey')
    )
    op.create_index('idx_action_status', 'actions', ['status'], unique=False)
    op.create_index('idx_action_retries', 'actions', ['retries'], unique=False)
    op.create_index('idx_action_order', 'actions', ['order'], unique=False)
    op.create_index('idx_action_lane_id', 'actions', ['lane_id'], unique=False)
    op.create_index('idx_action_estimated_duration', 'actions', ['estimated_duration'], unique=False)
    op.create_index('idx_action_created_at', 'actions', ['created_at'], unique=False)
    op.create_index('idx_action_automation_id', 'actions', ['automation_id'], unique=False)
    op.create_table('automations',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('trigger_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('sub_account_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('published', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('Active', 'Inactive', 'Archived', name='automation_status_enum'), autoincrement=False, nullable=False),
    sa.Column('conditions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('actions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('miscdata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('external_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['sub_account_id'], ['sub_account.id'], name='automations_sub_account_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['trigger_id'], ['triggers.id'], name='automations_trigger_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='automations_pkey'),
    sa.UniqueConstraint('external_id', name='automations_external_id_key')
    )
    op.create_index('idx_automation_trigger_id', 'automations', ['trigger_id'], unique=False)
    op.create_index('idx_automation_sub_account_id', 'automations', ['sub_account_id'], unique=False)
    op.create_index('idx_automation_status', 'automations', ['status'], unique=False)
    op.create_index('idx_automation_published', 'automations', ['published'], unique=False)
    op.create_index('idx_automation_external_id', 'automations', ['external_id'], unique=False)
    op.create_table('sub_account_sidebar_options',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('link', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('icon', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('sub_account_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['sub_account_id'], ['sub_account.id'], name='sub_account_sidebar_options_sub_account_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='sub_account_sidebar_options_pkey')
    )
    op.create_index('idx_sub_account_sidebar_option_sub_account_id', 'sub_account_sidebar_options', ['sub_account_id'], unique=False)
    op.create_table('tickets',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('laneId', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('customerId', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('assignedUserId', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('Open', 'In Progress', 'Closed', 'Resolved', name='ticket_status_enum'), autoincrement=False, nullable=False),
    sa.Column('priority', postgresql.ENUM('Low', 'Medium', 'High', name='ticket_priority_enum'), autoincrement=False, nullable=False),
    sa.Column('is_archived', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('custom_fields', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customerId'], ['contacts.id'], name='tickets_customerId_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['laneId'], ['lanes.id'], name='tickets_laneId_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='tickets_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_ticket_status', 'tickets', ['status'], unique=False)
    op.create_index('idx_ticket_priority', 'tickets', ['priority'], unique=False)
    op.create_index('idx_ticket_lane_id', 'tickets', ['laneId'], unique=False)
    op.create_index('idx_ticket_customer_id', 'tickets', ['customerId'], unique=False)
    op.create_index('idx_ticket_assigned_user_id', 'tickets', ['assignedUserId'], unique=False)
    op.create_table('agencies',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('connectAccountId', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('customerId', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('agencyLogo', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('companyEmail', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('companyPhone', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('whiteLabel', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('zipCode', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('country', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('goal', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('subscription_status', postgresql.ENUM('FREE', 'STARTER', 'GROWTH', 'BUSINESS', 'ENTERPRISE', 'CUSTOM', 'PAY_AS_YOU_GO', 'UNLIMITED', 'NON_PROFIT', 'EDUCATIONAL', name='subscriptiontier'), autoincrement=False, nullable=False),
    sa.Column('annual_revenue', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('miscdata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('business_sector', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('notification_settings', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('integrations', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('audit_logs', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('tax_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('billing_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('terms_and_conditions', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('privacy_policy', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='agencies_pkey'),
    sa.UniqueConstraint('companyEmail', name='agencies_companyEmail_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_subscription_status', 'agencies', ['subscription_status'], unique=False)
    op.create_index('idx_customer_id', 'agencies', ['customerId'], unique=False)
    op.create_index('idx_connectAccountId', 'agencies', ['connectAccountId'], unique=False)
    op.create_index('idx_agency_name', 'agencies', ['name'], unique=False)
    op.create_table('pipelines',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('subAccountId', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('Active', 'Inactive', 'Archived', name='pipeline_status_enum'), autoincrement=False, nullable=False),
    sa.Column('priority', postgresql.ENUM('Low', 'Medium', 'High', name='pipeline_priority_enum'), autoincrement=False, nullable=False),
    sa.Column('privacy_level', postgresql.ENUM('Public', 'Private', 'Restricted', name='pipeline_privacy_level'), autoincrement=False, nullable=False),
    sa.Column('estimated_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('goal', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('metrics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('integrations', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['subAccountId'], ['sub_account.id'], name='pipelines_subAccountId_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pipelines_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_sub_account_id', 'pipelines', ['subAccountId'], unique=False)
    op.create_index('idx_status', 'pipelines', ['status'], unique=False)
    op.create_index('idx_priority', 'pipelines', ['priority'], unique=False)
    op.create_index('idx_is_public', 'pipelines', ['is_public'], unique=False)
    op.create_table('external_partner',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('company_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('contact_email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('phone_number', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('industry', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('website', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('miscdata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='external_partner_pkey'),
    sa.UniqueConstraint('contact_email', name='external_partner_contact_email_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_external_partner_name', 'external_partner', ['name'], unique=False)
    op.create_index('idx_external_partner_email', 'external_partner', ['contact_email'], unique=False)
    op.create_index('idx_external_partner_company', 'external_partner', ['company_name'], unique=False)
    op.create_table('organizations',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('domain', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('industry', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('logo_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('phone_number', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('country', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('zip_code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('subscription_plan', postgresql.ENUM('FREE', 'STARTER', 'GROWTH', 'BUSINESS', 'ENTERPRISE', 'CUSTOM', 'PAY_AS_YOU_GO', 'UNLIMITED', 'NON_PROFIT', 'EDUCATIONAL', name='subscriptiontier'), autoincrement=False, nullable=False),
    sa.Column('subscription_expiry', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('billing_email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('privacy_policy_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('terms_of_service_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('gdpr_compliance', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('two_factor_required', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('data_encryption_level', postgresql.ENUM('PUBLIC', 'INTERNAL', 'CONFIDENTIAL', 'RESTRICTED', 'TOP_SECRET', 'PERSONAL', 'BUSINESS_CRITICAL', 'SENSITIVE', 'UNCLASSIFIED', 'PROPRIETARY', name='privacylevel'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='organizations_pkey'),
    sa.UniqueConstraint('domain', name='organizations_domain_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_name', 'organizations', ['name'], unique=False)
    op.create_index('idx_is_active', 'organizations', ['is_active'], unique=False)
    op.create_index('idx_domain', 'organizations', ['domain'], unique=False)
    op.create_table('add_ons',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('price_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('agency_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['agency_id'], ['agencies.id'], name='add_ons_agency_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='add_ons_pkey'),
    sa.UniqueConstraint('price_id', name='add_ons_price_id_key')
    )
    op.create_index('idx_add_on_agency_id', 'add_ons', ['agency_id'], unique=False)
    op.create_table('triggers',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('type', postgresql.ENUM('Time', 'Event', 'Manual', name='trigger_type_enum'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('sub_account_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('miscdata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('external_reference_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['sub_account_id'], ['sub_account.id'], name='triggers_sub_account_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='triggers_pkey'),
    sa.UniqueConstraint('external_reference_id', name='triggers_external_reference_id_key')
    )
    op.create_index('idx_trigger_type', 'triggers', ['type'], unique=False)
    op.create_index('idx_trigger_sub_account_id', 'triggers', ['sub_account_id'], unique=False)
    op.create_index('idx_trigger_is_active', 'triggers', ['is_active'], unique=False)
    op.create_index('idx_trigger_external_reference_id', 'triggers', ['external_reference_id'], unique=False)
    op.create_table('password_histories',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('change_reason', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_compliance_enforced', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_breach_notified', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('breach_source', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_temporary', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('previous_salt', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('hash_algorithm', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('last_accessed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='password_histories_pkey')
    )
    op.create_index('idx_user_id', 'password_histories', ['user_id'], unique=False)
    op.create_index('idx_is_compliance_enforced', 'password_histories', ['is_compliance_enforced'], unique=False)
    op.create_index('idx_expires_at', 'password_histories', ['expires_at'], unique=False)
    op.create_index('idx_created_at', 'password_histories', ['created_at'], unique=False)
    op.create_table('projects',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'COMPLETED', 'ON_HOLD', 'CANCELLED', name='projectstatus'), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('budget', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('miscdata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='projects_organization_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='projects_pkey')
    )
    op.create_index('idx_status_alue', 'projects', ['status'], unique=False)
    op.create_index('idx_project_name', 'projects', ['name'], unique=False)
    op.create_index('idx_organization_id', 'projects', ['organization_id'], unique=False)
    op.create_table('class_names',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('color', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('funnel_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('custom_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['funnel_id'], ['funnels.id'], name='class_names_funnel_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='class_names_pkey')
    )
    op.create_index('idx_class_name_funnel_id', 'class_names', ['funnel_id'], unique=False)
    op.create_table('funnels',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('published', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('sub_domain_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('favicon', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('sub_account_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('live_products', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['sub_account_id'], ['sub_account.id'], name='funnels_sub_account_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='funnels_pkey'),
    sa.UniqueConstraint('sub_domain_name', name='funnels_sub_domain_name_key')
    )
    op.create_index('idx_funnel_sub_account_id', 'funnels', ['sub_account_id'], unique=False)
    op.create_index('idx_funnel_live_products', 'funnels', ['live_products'], unique=False)
    op.create_table('ticket_tags_association',
    sa.Column('ticket_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name='ticket_tags_association_tag_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.id'], name='ticket_tags_association_ticket_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('ticket_id', 'tag_id', name='ticket_tags_association_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('avatarUrl', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('SUPER_ADMIN', 'AGENCY_OWNER', 'AGENCY_ADMIN', 'SUBACCOUNT_USER', 'SUBACCOUNT_GUEST', 'CUSTOMER', 'SUPPORT', 'AUDITOR', 'TEAM_LEAD', 'PRODUCT_MANAGER', 'SALES_REPRESENTATIVE', 'DEVELOPER', 'MARKETING_SPECIALIST', 'DATA_ANALYST', name='role'), autoincrement=False, nullable=False),
    sa.Column('account_status', postgresql.ENUM('ACTIVE', 'SUSPENDED', 'LOCKED', 'DELETED', 'PENDING_APPROVAL', 'ARCHIVED', 'DISABLED', 'INACTIVE', 'UNVERIFIED', 'TEMPORARY', name='accountstatus'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('phone_number', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('login_attempts', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('two_factor_secret', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('reset_token', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('oauth_providers', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('password_history', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('language', postgresql.ENUM('ENGLISH', 'SPANISH', 'FRENCH', 'GERMAN', 'CHINESE', 'JAPANESE', 'HINDI', 'ARABIC', 'PORTUGUESE', 'ITALIAN', 'RUSSIAN', name='languagepreference'), autoincrement=False, nullable=False),
    sa.Column('timezone', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('agencyId', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('privacy_level', postgresql.ENUM('PUBLIC', 'INTERNAL', 'CONFIDENTIAL', 'RESTRICTED', 'TOP_SECRET', 'PERSONAL', 'BUSINESS_CRITICAL', 'SENSITIVE', 'UNCLASSIFIED', 'PROPRIETARY', name='privacylevel'), autoincrement=False, nullable=False),
    sa.Column('subscription_plan', postgresql.ENUM('FREE', 'STARTER', 'GROWTH', 'BUSINESS', 'ENTERPRISE', 'CUSTOM', 'PAY_AS_YOU_GO', 'UNLIMITED', 'NON_PROFIT', 'EDUCATIONAL', name='subscriptiontier'), autoincrement=False, nullable=False),
    sa.Column('subscription_expiry', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('notification_preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['agencyId'], ['agencies.id'], name='users_agencyId_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='users_organization_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    sa.UniqueConstraint('phone_number', name='users_phone_number_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_tenant_id', 'users', ['tenant_id'], unique=False)
    op.create_index('idx_subscription_plan', 'users', ['subscription_plan'], unique=False)
    op.create_index('idx_email', 'users', ['email'], unique=False)
    op.create_index('idx_account_status', 'users', ['account_status'], unique=False)
    op.create_table('invitations',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('agency_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'ACCEPTED', 'REJECTED', name='invitation_status_enum'), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('SUBACCOUNT_USER', 'AGENCY_USER', name='invitation_role_enum'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['agency_id'], ['agencies.id'], name='invitations_agency_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='invitations_pkey'),
    sa.UniqueConstraint('email', name='invitations_email_key')
    )
    op.create_index('idx_invitation_agency_id', 'invitations', ['agency_id'], unique=False)
    op.create_table('sub_account',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('connectAccountId', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('subAccountLogo', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('companyEmail', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('companyPhone', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('goal', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('zipCode', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('country', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('agencyId', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('isActive', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('subscriptionStatus', postgresql.ENUM('FREE', 'STARTER', 'GROWTH', 'BUSINESS', 'ENTERPRISE', 'CUSTOM', 'PAY_AS_YOU_GO', 'UNLIMITED', 'NON_PROFIT', 'EDUCATIONAL', name='subscriptiontier'), autoincrement=False, nullable=False),
    sa.Column('miscdata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('notificationSettings', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('integrations', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('auditLogs', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('revenue', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('taxId', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('billingAddress', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('termsAndConditions', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('privacyPolicy', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('employeeCount', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('revenueForecast', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('annualGrowthRate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('businessSector', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('companyWebsite', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('externalResources', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('contractStartDate', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('contractEndDate', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('serviceLevelAgreement', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('performanceMetrics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['agencyId'], ['agencies.id'], name='sub_account_agencyId_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='sub_account_pkey'),
    sa.UniqueConstraint('companyEmail', name='sub_account_companyEmail_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_sub_account_name', 'sub_account', ['name'], unique=False)
    op.create_index('idx_agency_id', 'sub_account', ['agencyId'], unique=False)
    op.create_table('sub_account_user_association',
    sa.Column('sub_account_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['sub_account_id'], ['sub_account.id'], name='sub_account_user_association_sub_account_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='sub_account_user_association_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('sub_account_id', 'user_id', name='sub_account_user_association_pkey')
    )
    op.create_table('permissions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('subAccountId', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('access', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('role_override', postgresql.ENUM('SUPER_ADMIN', 'AGENCY_OWNER', 'AGENCY_ADMIN', 'SUBACCOUNT_USER', 'SUBACCOUNT_GUEST', 'CUSTOMER', 'SUPPORT', 'AUDITOR', 'TEAM_LEAD', 'PRODUCT_MANAGER', 'SALES_REPRESENTATIVE', 'DEVELOPER', 'MARKETING_SPECIALIST', 'DATA_ANALYST', name='role'), autoincrement=False, nullable=True),
    sa.Column('assigned_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('assigned_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('permissions_type', postgresql.ENUM('basic', 'advanced', 'custom', name='permissions_type_enum'), autoincrement=False, nullable=False),
    sa.Column('restrictions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('audit_logs', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('additional_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['subAccountId'], ['sub_account.id'], name='permissions_subAccountId_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='permissions_pkey')
    )
    op.create_index('ix_permissions_subAccountId', 'permissions', ['subAccountId'], unique=False)
    op.create_index('ix_permissions_email', 'permissions', ['email'], unique=False)
    op.create_index('ix_permissions_assigned_by', 'permissions', ['assigned_by'], unique=False)
    op.create_index('idx_permissions_type', 'permissions', ['permissions_type'], unique=False)
    op.create_index('idx_email_sub_account', 'permissions', ['email', 'subAccountId'], unique=False)
    op.create_index('idx_assigned_by', 'permissions', ['assigned_by'], unique=False)
    op.create_table('sub_account_external_partner_association',
    sa.Column('sub_account_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('external_partner_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['external_partner_id'], ['external_partner.id'], name='sub_account_external_partner_associati_external_partner_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sub_account_id'], ['sub_account.id'], name='sub_account_external_partner_association_sub_account_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('sub_account_id', 'external_partner_id', name='sub_account_external_partner_association_pkey')
    )
    op.create_table('notifications',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('notification', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('agency_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('sub_account_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['agency_id'], ['agencies.id'], name='notifications_agency_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sub_account_id'], ['sub_account.id'], name='notifications_sub_account_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='notifications_pkey')
    )
    op.create_index('idx_notification_user_id', 'notifications', ['user_id'], unique=False)
    op.create_index('idx_notification_agency_id', 'notifications', ['agency_id'], unique=False)
    op.create_table('contacts',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('sub_account_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('miscdata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['sub_account_id'], ['sub_account.id'], name='contacts_sub_account_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='contacts_pkey'),
    sa.UniqueConstraint('email', name='contacts_email_key')
    )
    op.create_index('idx_contact_sub_account_id', 'contacts', ['sub_account_id'], unique=False)
    op.create_index('idx_contact_is_active', 'contacts', ['is_active'], unique=False)
    op.create_table('pipeline_tags',
    sa.Column('pipeline_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['pipeline_id'], ['pipelines.id'], name='pipeline_tags_pipeline_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name='pipeline_tags_tag_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('pipeline_id', 'tag_id', name='pipeline_tags_pkey')
    )
    op.create_table('media',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('link', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('sub_account_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('miscdata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['sub_account_id'], ['sub_account.id'], name='media_sub_account_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='media_pkey'),
    sa.UniqueConstraint('link', name='media_link_key')
    )
    op.create_index('idx_media_sub_account_id', 'media', ['sub_account_id'], unique=False)
    op.create_table('tags',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('color', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('subAccountId', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('miscdata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('assigned_to', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['subAccountId'], ['sub_account.id'], name='tags_subAccountId_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='tags_pkey')
    )
    op.create_index('idx_category', 'tags', ['category'], unique=False)
    op.create_table('agency_sidebar_options',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('link', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('icon', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('agency_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['agency_id'], ['agencies.id'], name='agency_sidebar_options_agency_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='agency_sidebar_options_pkey')
    )
    op.create_index('idx_agency_sidebar_option_agency_id', 'agency_sidebar_options', ['agency_id'], unique=False)
    op.create_table('tag_to_ticket',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('A', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('B', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='tag_to_ticket_pkey'),
    sa.UniqueConstraint('A', 'B', name='_TagToTicket_AB_unique')
    )
    op.create_index('idx_tag_to_ticket_B', 'tag_to_ticket', ['B'], unique=False)
    op.create_table('subscriptions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('plan', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('price', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('price_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('current_period_end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('subscription_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('agency_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['agency_id'], ['agencies.id'], name='subscriptions_agency_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='subscriptions_pkey'),
    sa.UniqueConstraint('subscription_id', name='subscriptions_subscription_id_key')
    )
    op.create_index('idx_subscription_customer_id', 'subscriptions', ['customer_id'], unique=False)
    op.create_index('idx_subscription_agency_id', 'subscriptions', ['agency_id'], unique=False)
    # ### end Alembic commands ###
